<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="products">
  	<select id="all_list_desc" resultType="ProductsVO">
		SELECT p.*, COALESCE(AVG(r.rating), 0) AS avg_rating
		FROM products p
		LEFT JOIN reviews r 
		ON p.product_idx = r.product_idx 
		AND p.is_active = 1
		GROUP BY p.product_idx
		ORDER BY avg_rating DESC
  	</select>
  	<select id="all_list_asc" resultType="ProductsVO">
		SELECT p.*, COALESCE(AVG(r.rating), 0) AS avg_rating
		FROM products p
		LEFT JOIN reviews r 
		ON p.product_idx = r.product_idx 
		AND p.is_active = 1
		GROUP BY p.product_idx
		ORDER BY avg_rating ASC
  	</select>
  	<select id="category" resultType="CategoryVO">
  		SELECT * FROM categories
  	</select>
  	<select id="category_products_asc" parameterType="String" resultType="ProductsVO">
		SELECT p.*, COALESCE(AVG(r.rating), 0) AS avg_rating
		FROM products p
		LEFT JOIN reviews r 
		ON p.product_idx = r.product_idx 
		WHERE category_idx = #{category_idx}
		AND p.is_active = 1
		GROUP BY p.product_idx
		ORDER BY avg_rating ASC
  	</select>
  	<select id="category_products_desc" parameterType="String" resultType="ProductsVO">
		SELECT p.*, COALESCE(AVG(r.rating), 0) AS avg_rating
		FROM products p
		LEFT JOIN reviews r 
		ON p.product_idx = r.product_idx 
		WHERE category_idx = #{category_idx}
		AND p.is_active = 1
		GROUP BY p.product_idx
		ORDER BY avg_rating DESC
  	</select>
  	<select id="search_products_asc" parameterType="String" resultType="ProductsVO">
		SELECT p.*, COALESCE(AVG(r.rating), 0) AS avg_rating
		FROM products p
		LEFT JOIN reviews r 
		ON p.product_idx = r.product_idx 
		WHERE product_name LIKE #{keyword}
		AND p.is_active = 1
		GROUP BY p.product_idx
		ORDER BY avg_rating ASC
  	</select>
  	<select id="search_products_desc" parameterType="String" resultType="ProductsVO">
		SELECT p.*, COALESCE(AVG(r.rating), 0) AS avg_rating
		FROM products p
		LEFT JOIN reviews r 
		ON p.product_idx = r.product_idx 
		WHERE product_name LIKE #{keyword}
		AND p.is_active = 1
		GROUP BY p.product_idx
		ORDER BY avg_rating DESC
  	</select>
  	
  	<select id="detail" parameterType="String" resultType="ProductsVO">
		SELECT p.*, COALESCE(AVG(r.rating), 0) AS avg_rating
		FROM products p
		LEFT JOIN reviews r 
		ON p.product_idx = r.product_idx 
		WHERE p.product_idx = #{product_idx}
		GROUP BY p.product_idx
  	</select>
  	
  	    <!-- 리뷰 개수 세기 -->
    <select id="reviews_count" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM reviews
        WHERE product_idx = #{product_idx}
    </select>
    
    <!-- 리뷰 가져오기 - 페이징 -->
    <select id="reviews_paging" parameterType="Map" resultType="ReviewVO">
		SELECT r.* , u.username
		FROM reviews r 
		LEFT JOIN users u
		ON u.user_idx = r.user_idx
		WHERE product_idx = #{product_idx} 
		ORDER BY r.created_at DESC 
		LIMIT #{limit}
		OFFSET #{offset}
    </select>
    
    <delete id="reviews_delete" parameterType="String">
    	DELETE FROM reviews
		WHERE review_idx = #{review_idx};
    </delete>
    
    <insert id="review_insert" parameterType="ReviewVO">
    	INSERT INTO reviews(product_idx, user_idx, rating, comment, created_at, updated_at, is_approved) 
		VALUES(#{product_idx}, #{user_idx}, #{rating}, #{comment}, now(), now(), 1)
    </insert>
    
</mapper>